#+title: Project Creation

[[https://www.digitalocean.com/community/tutorials/setting-up-a-node-project-with-typescript][How To Set Up a Node Project With Typescript]]

* Create Frontend Project - not working yet

** 1. Project Structure

#+begin_src
project/
├── backend/         (your existing Fastify/TS project)
└── frontend/
    ├── src/
    │   ├── index.ts
    │   └── styles.css
    ├── public/
    │   └── index.html
    ├── dist/        (compiled output)
    ├── package.json
    ├── tsconfig.json
    ├── postcss.config.js
    └── tailwind.config.js
#+end_src

** 2. initialize  frontend directory:

#+begin_src bash
mkdir -p frontend/src frontend/public
cd frontend
npm init -y
#+end_src

** 3. Install Dependencies

#+begin_src bash
npm install --save-dev typescript ts-loader webpack webpack-cli webpack-dev-server
npm install --save-dev html-webpack-plugin style-loader css-loader postcss postcss-loader
npm install --save-dev tailwindcss autoprefixer
npm install --save-dev @types/node
#+end_src
** 3. Install Dependencies

#+begin_src bash
npm install --save-dev typescript
npm install --save-dev tailwindcss postcss autoprefixer
npm install --save-dev esbuild concurrently npm-run-all
#+end_src


** 4. Configure TypeScript

Create =tsconfig.json=:

#+begin_src json
{
  "compilerOptions": {
    "target": "es6",
    "module": "esnext",
    "moduleResolution": "node",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "outDir": "./dist",
    "sourceMap": true,
    "lib": ["dom", "dom.iterable", "esnext"]
  },
  "include": ["src/**/*"]
}
#+end_src


** 5. Configure Tailwind CSS

Initialize Tailwind CSS:

#+begin_src bash
npx tailwindcss init
#+end_src

Update =tailwind.config.js=:

#+begin_src javascript
/** @type {import('tailwindcss').Config} */
export default {
  content: ["./public/**/*.html", "./src/**/*.{ts,js}"],
  theme: {
    extend: {},
  },
  plugins: [],
}
#+end_src

Create =src/styles/main.css=:

#+begin_src css
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Your custom CSS here */
#+end_src

Create =postcss.config.js=:

#+begin_src javascript
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  }
}
#+end_src

** 6. Create Basic Frontend Files

Create =public/index.html=:

#+begin_src html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Your TypeScript Application</title>
    <link rel="stylesheet" href="css/styles.css">
</head>
<body class="bg-gray-100">
    <div id="app" class="container mx-auto p-4">
        <h1 class="text-3xl font-bold text-blue-600 mb-4">Your Application</h1>
        <div id="content" class="p-4 bg-white rounded shadow"></div>
    </div>
    <script src="js/app.js"></script>
</body>
</html>
#+end_src

Create =src/ts/app.ts=:

#+begin_src typescript
interface ApiResponse {
  message: string;
}

document.addEventListener('DOMContentLoaded', async () => {
  const content = document.getElementById('content');
  if (!content) return;

  try {
    const response = await fetch('http://localhost:3000/ping');
    const data = await response.text();
    content.textContent = `Server response: ${data}`;

    // Add some dynamic Tailwind classes
    content.classList.add('text-green-600', 'font-semibold');
  } catch (error) {
    content.textContent = `Error connecting to server: ${error instanceof Error ? error.message : String(error)}`;
    content.classList.add('text-red-600');
  }
});
#+end_src

** 7. Add Build Scripts

Update =package.json= with build scripts:

#+begin_src json
{
  "name": "frontend",
  "version": "1.0.0",
  "scripts": {
    "build:ts": "esbuild src/ts/app.ts --bundle --outfile=public/js/app.js --sourcemap",
    "build:css": "npx tailwindcss -i src/styles/main.css -o public/css/styles.css",
    "build": "npm-run-all --parallel build:*",
    "watch:ts": "esbuild src/ts/app.ts --bundle --outfile=public/js/app.js --sourcemap --watch",
    "watch:css": "npx tailwindcss -i src/styles/main.css -o public/css/styles.css --watch",
    "dev": "npm-run-all --parallel watch:*",
    "serve": "npx http-server public -p 8080",
    "start": "npm run build && npm run serve"
  },
  "dependencies": {},
  "devDependencies": {
    "autoprefixer": "^10.4.16",
    "concurrently": "^8.2.2",
    "esbuild": "^0.19.5",
    "http-server": "^14.1.1",
    "npm-run-all": "^4.1.5",
    "postcss": "^8.4.31",
    "tailwindcss": "4.0.0-alpha.2",
    "typescript": "^5.2.2"
  }
}
#+end_src

** 8. Development Workflow

1. Build the frontend:
   #+begin_src bash
   cd frontend
   npm run build
   #+end_src

2. For development with hot reloading:
   #+begin_src bash
   npm run dev
   #+end_src
   In another terminal:
   #+begin_src bash
   npm run serve
   #+end_src

3. Run the backend server:
   #+begin_src bash
   cd backend
   npm run build && npm start
   #+end_src

4. Open =http://localhost:8080= in your browser

** 9. CORS Configuration for Backend

Make sure your Fastify backend has CORS enabled:

#+begin_src typescript
// in your backend/index.ts
import fastify from "fastify";
import cors from "@fastify/cors";

const server = fastify();

// Enable CORS
await server.register(cors, {
  origin: true // or specify allowed origins like ['http://localhost:8080']
});

// Your routes
server.get("/ping", async (request, reply) => {
  return "pong\n";
});

// ...rest of your code
#+end_src

This setup provides you with:
- TypeScript for type-safe frontend code
- Tailwind CSS 4 for styling
- A build process that compiles TS to JS and CSS
- A development workflow with watchers for file changes
- Complete decoupling between frontend and backend
