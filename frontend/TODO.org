#+title: TODO

* TODO Game
- [X] change to typescript
- [X] eliminate magic nbrs
- [X] Bug: ball is sliding at the edge of the paddle
  - [X] prevent sliding inside paddle
  - [X] actually implement behavior of ball hitting the top or bottom side and corners respectively
    - [X] we didn't do it but it looks alright now
- [X] rename Dashboard.ts to DashboardView.ts
- [X] Bug: ball is accelerating when ArrowUp or ArrowDown is used
  - solved: prevent default browser behavior on ArrowUp and ArrowDown
- [X] refactor input handling

- [X] adjust the paddle dimensions to the canvas (still need to have a look)
  - [X] adjust all the dimensions to the canvas dimensions
- [X] lot of "this" usage in game.ts. How can we improve that?
- [X] change layout of GameConfig interface
  - [X] make a BallConfig
    #+begin_src js
this.ball = new Ball(canvas, config.ballConfig);
    #+end_src
  - [X] make a PaddleConfig
- [ ] game setup by the player(s)
  - [ ] who is playing against who
  - [ ] playing the Ai Opponent
  - [ ] start button and drop down menus for selecting AIOpponent and sides
- [ ] how do we toggle/untoggle AIOpponents
- [ ] game over screen

* TODO Frontend
- [X] typify navbar
- [X] typify lightbox
- [X] browser is still reloading pages, investigate
- [X] re-check when you need to destroy views
  - [[file:~/workspace/transcendence/chats/component_based_architecture.org::*when do i destroy views?][when do i destroy views?]]
- [X] refresh view with new content from the server

- [X] why does adlightbox does not show up when you return to the dashboard
  - there is a reason for this [[file:src/components/adLightbox/adLightbox.ts::window.removeEventListener("load", showAdAfterTimeout); // only initially page load]]
  - it's only when the page is loaded ("load" event)

- [ ] rather setup CORS with fastify and environment variables
  - right now it is vite, with a proxy server making it possible during developement

- [ ] setup nginx and setup production environment
- [ ] clean up navbar html
  - [ ] set all the links and important attributes (everything that is not tailwind inside the component itsel)
* TODO backend
- [ ] define uuid before inserting
* TODO UserStories
** DONE Login
As a visitor to the website, I want to easily log in with my credentials, so I can access my account features and have a seamless authenticated experience.

** DONE Signup
As a visitor to the website, I want to easily sign up email and password, so I can track my games.
** TODO Avatar
As a registered user of the website, I want to be able to navigate to my profile, where I can see my Username, my email and my avatar, so I can individualize my appearance on the website.
* TODO Stats / Match History
- we need to track outcomes of games being played
- display them on the profile
  - need to make call to backendAPI
  - probably matchService
    - CRUD on matches (CREATION - READ - UPDATE - DELETE)~(POST - GET - PUT - DELETE)
* TODO user friendship
- Users can add others as friends and view their online status.
  - probably entails having a field "online" or "loggedIn" on the user-Model
  - maybe simulate it with 2 different browsers
- probably a new table one-to-many
  | userID | userID |
  |--------+--------|
  |      1 |      2 |
  |      1 |      4 |
  |      1 |      6 |
  |      2 |      1 |
  |      2 |      3 |
  |      3 |      2 |
  |      4 |      1 |
  |      6 |      1 |

- inside the userService / authService
- when user visits the profile view
  - the friends online statuses are going to be collected and displayed with the help of the table above
    - maybe adding the avatar of the friend
* TODO Tournament (flow)
** TODO Signing up participants (min=max=4)
1. tournament link on the navbar
2. directed to tournament-creation (signup) page
   - each participants is going to login
   - visitors (maybe)
     - prompt unique username
     - set an avatar maybe
   - subscribed users (Backend calls)
     - verify that account owners credentials
     - retrieving the avatar
     - default is username
     - prompt for a nickname for this tournament
       - which does not necessarily change the username
3. everybody clicks submit (Backend call)
4. Click Start Tournament button (backend call)
   - build the tournament bracket
   - assign participants to matches
** TODO Seeing the bracket (without backend calls)
- intermediary view
** TODO Announce next game (maybe animation)
- intermediary view
** TODO Game
- game is being played
- winner advances
- saving the outcome (call to backend)
** TODO Announce next game
** TODO Game
** TODO Maybe see bracket again
** TODO Announce next game
** TODO Loser's Game
** TODO Announce next game
** TODO Final
