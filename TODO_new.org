#+title: Todo New

- [X] Disabling to press enable2FA multiple times
- [X] disable enable2FA if the user has it already enabled
- [X] twofa_enabled should have a default value of "false"
- [X] add 2faEnabled attribute on user
- [X] what happens if the process is aborted?
  - 2fa secret gets created but it is not used since it is still disabled
  - clicking enable 2fa again after the user navigated somewhere else will just create another secret
- [X] do authorization in updateUser/updateProfile
  - find a way that only the actual user can change its data
- [X] actually implement 2fa verification (in login / disable and register)
- [X] implement disable-2fa verification
- [X] make better updateProfile (everything)

- [X] implement "api/auth/verify" (something like that)
  - [X] this is for the tournament
  - [X] also will use 2fa

- [X] change prefix for updateProfile
- [X] bug: once 2fa is verified with wrong code, it is not working anymore (at least in tournament)
  - in login view it seems to work
- [X] have craetedAt timestamp at match
- [X] proper return schema for postMatch
- [X] make email and username changeable in profile

- [X] new table
  - [X] create migration with new table
    #+begin_src sqlite
  CREATE TABLE tournament_matches (
      tournament_id TEXT NOT NULL,
      match_id TEXT NOT NULL,
      FOREIGN KEY (tournament_id) REFERENCES tournaments(id),
      FOREIGN KEY (match_id) REFERENCES matches(id),
  );
    #+end_src
  - [X] when a match is saved, and it was part of a tournament (GameMode = "tournament"), it should be added to this table
  - [X] remove column "status" from tournaments
- [X] when usual game is played, player2 avatar shall be the default avatar as well
  - solution with default-pfp -> look into notes

- [X] bug: in TournamentCreationPanel: clicking on register multiple times will open verification multiple times
- [X] add statistics in profile
- [X] grey line on tournamentCreationPanel

- [X] add match history view
  - [X] when clicking on a user in matchView or tournamentView or in the matchHistoryView, it should lead to the match history of that user
  - [X] change PublicUser to something more strict (without twoFaEnabled)
  - [X] have a real PublicUser (only id, username, avatar)
- [X] do user not by id but by username
- [X] have tournamentsystem without registration
- [X] change to /user/id//:id to /user//:username

- [ ] disable sign-in button when 2fa is reached
  - [ ] at profile change

- [ ] not used notifications button in navbar
  - [ ] maybe we can use it for friendship requests
- [X] username validation: set the char length limit on username, email, and password
- [X] browser tab name "Vite + TS" in frontend/index.html
- [ ] don't be able to type any more into slot after pressing register and success (disable test field)

- [ ] treating the security hole that a logged in user can actually post a tournament with any valid uuids
  - [ ] need to check if the users exist
  - [ ] need to have some token verification
    - maybe soomething like
      #+begin_src typescript
        const token = request.server.jwt.sign({userId: asdf, verified: true}, { expiresIn: "5min" });
      #+end_src
- [ ] not working "forgot password" in login
  - don't see it in the subject (but interesting for sure)
- [X] not used leaderboard in navbar

* DONE notes eriki_tournament_matches
- instead of giving tournamendId as string in constructor of the GameComponent, use the GameComponentOptions
- delete getTournamentId (we already have getTournament)
- tournamentId? inside the type
- outfactor default-pfp.png (it is present in some places of the code, we should factor this out to somewhere, where it can be defined application wide)

* DONE notes on new user type
- auth routes that need to send back twoFaEnabled or not (those where the frontend will set the current user)
  - /signup (always false)
  - /login
  - /2fa/complete
  - POST /api/user - updateUser
    - because it updates the user in the frontend, so it needs it

- the ones that send back a PublicUser object but don't need the twoFaEnabled in the frontend
  - GET /profile
    - but here we have a Profile type, and i just deleted twoFaEnabled on it
  - POST /auth/verify
    - in frontend/auth/auth.service ts verifyUser returns a PublicUser object which is not necessary, should only return id/username/avatar
    - actually verify can stay like this, but the user object returned by authService.verifyUser should be a real PublicUser
    -

* notes (subject go-through)
- [X] implement default version of the tournament system
- [ ] add friends button
  - [ ] "Users can see the profile of other users. A profile contains basic informations such as their nickname, their avatar, or a button to add them as friends."
  - [ ] "The user has access to a (friends interface), where they can see their friends and their status (offline/online/in a game/and so forth). They also have access to basics informations about them (name/nickname, avatar and so forth)."
  - [ ] make sure that gdpr is deleting/anonymizing/information is still working


- [ ] delete old avatars when they are updated
- [ ] Ensure that the AI adapts to different gameplay scenarios and user interactions.
  - make difficulty a little bit adaptive to the game score?
  - maybe add some radomness to the moves
- [ ] double check input validation!
  - "Ensure that the website is secured. Check the database to verify that passwords are hashed. Check the server for server-side validation/sanitization on forms and any user input. If this isn't done, the evaluation ends now."
- [ ] check for unhandled errors
- [ ] check for warnings
  - must exclude all the comments
- [ ] more precise warnings in registration process
- [ ] make sure every jwt gets a proper timeout

- [ ] maybe need to implement the other 2fa options
  - [ ] ask Alex

- [ ] ask Chris about the firewall
  - I have turned it off in one service so that i can reach it
  - lot of filtering going on

- [ ] go over cybersecurity modules with Chris

- [ ] XSS attacks?
  - let's try to hack it with the help of an llm

- files are accepted to much
  - restrict gif/jpeg/png

- download button
  - wenn Zeit ist, dann machen

- deletion of avatars when user requests deletion of data
  - depends on deletion of avatars in general

- test hacks
  - rerun
  - include XSS and SQL-Injection

- [ ] delete all logs in all services and in frontend

- [ ] when a match is played and the user goes back in time, the match is registered multiple times in the database
  - [ ] needs to be figured out somehow
- [ ] gpdr.controllers are still missing schemas and body and response types
