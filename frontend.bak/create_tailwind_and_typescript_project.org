#+title: Create Tailwind And Typescript Project

* Following YT-Video (the best)
https://www.youtube.com/watch?v=n9widGM__Lg
** install tailwindcss and tailwindcss cli
#+begin_src
npm install tailwindcss @tailwindcss/cli
#+end_src
** import tailwind in your css
1. create src/
   #+begin_src
mkdir src
   #+end_src
2. Touch =input.css=
   #+begin_src
touch src/input.css
   #+end_src
3. Add this to input.css
   #+begin_src css
@import "tailwindcss";
   #+end_src
** start tailwind cli build process
#+begin_src
npx @tailwindcss/cli -i ./src/input.css -o ./src/output.css --watch
#+end_src
- watch: this is a running process which updats ./src/outpu.css
** start using tailwind in html
#+begin_src html
<!-- index.html -->
<!doctype html>
<html>
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link href="./output.css" rel="stylesheet">
</head>
<body>
  <h1 class="text-3xl font-bold underline">
    Hello world!
  </h1>
</body>
</html>
#+end_src
** serve directory (and in emacs do impatient mode 8080/imp)
** put the compile code into package.json
#+begin_src
npx @tailwindcss/cli -i ./src/input.css -o ./src/output.css --watch
#+end_src
** install language-server
#+begin_src emacs-lisp
(add-to-list 'eglot-server-programs '((mhtml-mode) "tailwindcss-language-server")))
#+end_src
** restructure project layout
1. put index.html into dist/
2. change dev command to
   #+begin_src
    "dev": "npx @tailwindcss/cli -i ./src/input.css -o ./dist/styles.css --watch"
   #+end_src
3. change source file in html
   #+begin_src html
    <link href="./styles.css" rel="stylesheet">
   #+end_src
* add typescript
** install typescript
#+begin_src sh
npm install --save-dev typescript
#+end_src
** init typescript
- =npx tsc --init= creates a default TypeScript configuration file (=tsconfig.json=) in your current directory.

#+begin_src sh
npx tsc --init
#+end_src
** change tsconfig.json
#+begin_src js
{
  "compilerOptions": {
    "target": "ES2022",
    "module": "ES2022",
    "lib": ["ES2020", "DOM"],
    "outDir": "./dist",
    "rootDir": "./src",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "moduleResolution": "node"
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "dist"]
}
#+end_src

* update package.json
** add concurrently and liveserver
#+begin_src sh
npm install --save-dev concurrently live-server
#+end_src
** update scripts

#+begin_src json
{
  "scripts": {
    "dev": "npm run copy-html && concurrently \"npm run watch-css\" \"npm run watch-ts\" \"npm run watch-html\" \"npm run serve\"",
    "watch-css": "npx @tailwindcss/cli -i ./src/styles/input.css -o ./dist/styles.css --watch",
    "watch-ts": "tsc --watch",
    "watch-html": "chokidar \"src/**/*.html\" -c \"npm run copy-html\"",
    "copy-html": "cp src/*.html dist/",
    "build": "npm run copy-html && tsc && npx @tailwindcss/cli -i ./src/styles/input.css -o ./dist/styles.css --minify",
    "serve": "live-server dist --port=3000"
  }
}
#+end_src
** run frontend development server
#+begin_src sh
npm run dev
#+end_src

* Project Structure
#+begin_src
my-spa-project/
├── frontend/
│   ├── src/
│   │   ├── index.html
│   │   ├── main.ts
│   │   ├── styles/
│   │   │   └── input.css
│   │   └── types/
│   │       └── index.ts
│   ├── dist/
│   ├── package.json
│   ├── tsconfig.json
│   └── tailwind.config.js
├── backend/
│   ├── services/
│   │   ├── api-gateway/
│   │   │   ├── src/
│   │   │   │   └── server.ts
│   │   │   └── package.json
│   │   ├── user-service/
│   │   │   ├── src/
│   │   │   │   └── server.ts
│   │   │   └── package.json
│   │   └── auth-service/
│   │       ├── src/
│   │       │   └── server.ts
│   │       └── package.json
│   └── shared/
│       └── types/
│           └── index.ts
└── docker-compose.yml
#+end_src
